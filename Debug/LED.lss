
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c8  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000548  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000406  00000000  00000000  00001e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  74:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Button_init>:
 *  Author: Omar
 */ 
#include "Button.h"
void Button_init()
{
	DIO_init(PC, 0X00);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
  84:	08 95       	ret

00000086 <Button_read>:
}
uint8_t Button_read()
{
	return DIO_read(PC, 0X01);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_read>
  8e:	08 95       	ret

00000090 <LED_init>:
 */
#include "LED.h"

void LED_init()
{
	DIO_init(PA, 0X01);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
  98:	08 95       	ret

0000009a <LED_on>:
}
void LED_on()
{
	DIO_set(PA,0X01);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 97 00 	call	0x12e	; 0x12e <DIO_set>
  a2:	08 95       	ret

000000a4 <LED_off>:
}
void LED_off()
{
	DIO_reset(PA,0X01);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_reset>
  ac:	08 95       	ret

000000ae <LED_toggle>:
}
void LED_toggle()
{
	volatile static uint8_t state = OFF;
	if(state == ON)
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	29 f4       	brne	.+10     	; 0xc0 <LED_toggle+0x12>
	{
		LED_off();
  b6:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_off>
		state = OFF;
  ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	08 95       	ret
	}
	else if(state == OFF)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	81 11       	cpse	r24, r1
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <LED_toggle+0x24>
	{
		LED_on();
  c8:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_on>
		state = ON;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	08 95       	ret

000000d4 <main>:
#include "D:\Sprints\LED\LED\ECUAL\LED.h"
#include "D:\Sprints\LED\LED\ECUAL\Button.h"

int main(void)
{
    LED_init();
  d4:	0e 94 48 00 	call	0x90	; 0x90 <LED_init>
	Button_init();
  d8:	0e 94 3e 00 	call	0x7c	; 0x7c <Button_init>
	
    while (1) 
    {
		if(Button_read())
  dc:	0e 94 43 00 	call	0x86	; 0x86 <Button_read>
  e0:	88 23       	and	r24, r24
  e2:	e1 f3       	breq	.-8      	; 0xdc <main+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x14>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x1a>
  ee:	00 00       	nop
		{
			_delay_ms(15); //FOR DEBOUNCING
			if(Button_read())
  f0:	0e 94 43 00 	call	0x86	; 0x86 <Button_read>
  f4:	88 23       	and	r24, r24
  f6:	91 f3       	breq	.-28     	; 0xdc <main+0x8>
			{
				LED_toggle();
  f8:	0e 94 57 00 	call	0xae	; 0xae <LED_toggle>
  fc:	ef cf       	rjmp	.-34     	; 0xdc <main+0x8>

000000fe <DIO_init>:
 *      Author: Omar
 */
#include "dio.h"
void DIO_init(uint8_t Port_name, uint8_t value )
{
	switch(Port_name)
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	51 f0       	breq	.+20     	; 0x116 <DIO_init+0x18>
 102:	28 f0       	brcs	.+10     	; 0x10e <DIO_init+0x10>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	59 f0       	breq	.+22     	; 0x11e <DIO_init+0x20>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	69 f0       	breq	.+26     	; 0x126 <DIO_init+0x28>
 10c:	08 95       	ret
	{
		case PA:
		{
			DDRA |= value;
 10e:	8a b3       	in	r24, 0x1a	; 26
 110:	68 2b       	or	r22, r24
 112:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 114:	08 95       	ret
		case PB:
		{
			DDRB |= value;
 116:	87 b3       	in	r24, 0x17	; 23
 118:	68 2b       	or	r22, r24
 11a:	67 bb       	out	0x17, r22	; 23
		}
		break;
 11c:	08 95       	ret
		case PC:
		{
			DDRC |= value;
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	68 2b       	or	r22, r24
 122:	64 bb       	out	0x14, r22	; 20
		}
		break;
 124:	08 95       	ret
		case PD:
		{
			DDRD |= value;
 126:	81 b3       	in	r24, 0x11	; 17
 128:	68 2b       	or	r22, r24
 12a:	61 bb       	out	0x11, r22	; 17
 12c:	08 95       	ret

0000012e <DIO_set>:
		break;
	}
}
void DIO_set(uint8_t Port_name, uint8_t value)
{
	switch(Port_name)
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	51 f0       	breq	.+20     	; 0x146 <DIO_set+0x18>
 132:	28 f0       	brcs	.+10     	; 0x13e <DIO_set+0x10>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	59 f0       	breq	.+22     	; 0x14e <DIO_set+0x20>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	69 f0       	breq	.+26     	; 0x156 <DIO_set+0x28>
 13c:	08 95       	ret
	{
		case PA:
		{
			PORTA |= value;
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	68 2b       	or	r22, r24
 142:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 144:	08 95       	ret
		case PB:
		{
			PORTA |= value;
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	68 2b       	or	r22, r24
 14a:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 14c:	08 95       	ret
		case PC:
		{
			PORTA |= value;
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	68 2b       	or	r22, r24
 152:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 154:	08 95       	ret
		case PD:
		{
			PORTA |= value;
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	68 2b       	or	r22, r24
 15a:	6b bb       	out	0x1b, r22	; 27
 15c:	08 95       	ret

0000015e <DIO_reset>:
		break;
	}
}
void DIO_reset(uint8_t Port_name, uint8_t value)
{
	switch(Port_name)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	59 f0       	breq	.+22     	; 0x178 <DIO_reset+0x1a>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_reset+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	69 f0       	breq	.+26     	; 0x182 <DIO_reset+0x24>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	81 f0       	breq	.+32     	; 0x18c <DIO_reset+0x2e>
 16c:	08 95       	ret
	{
		case PA:
		{
			PORTA = PORTA & (~value);
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	60 95       	com	r22
 172:	68 23       	and	r22, r24
 174:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 176:	08 95       	ret
		case PB:
		{
			PORTB = PORTB & (~value);
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	60 95       	com	r22
 17c:	68 23       	and	r22, r24
 17e:	68 bb       	out	0x18, r22	; 24
		}
		break;
 180:	08 95       	ret
		case PC:
		{
			PORTC = PORTC & (~value);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	65 bb       	out	0x15, r22	; 21
		}
		break;
 18a:	08 95       	ret
		case PD:
		{
			PORTD = PORTD & (~value);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	60 95       	com	r22
 190:	68 23       	and	r22, r24
 192:	62 bb       	out	0x12, r22	; 18
 194:	08 95       	ret

00000196 <DIO_read>:
	}
}
uint8_t DIO_read(uint8_t Port_name, uint8_t value )
{
	uint8_t Data = 0;
	switch(Port_name)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	49 f0       	breq	.+18     	; 0x1ac <DIO_read+0x16>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_read+0x10>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	49 f0       	breq	.+18     	; 0x1b2 <DIO_read+0x1c>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <DIO_read+0x22>
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <DIO_read+0x28>
	{
		case PA:
		{
			Data =  PINA & value;
 1a6:	89 b3       	in	r24, 0x19	; 25
 1a8:	86 23       	and	r24, r22
		}
		break;
 1aa:	08 95       	ret
		case PB:
		{
			Data =  PINB & value;
 1ac:	86 b3       	in	r24, 0x16	; 22
 1ae:	86 23       	and	r24, r22
		}
		break;
 1b0:	08 95       	ret
		case PC:
		{
			Data =  PINC & value;
 1b2:	83 b3       	in	r24, 0x13	; 19
 1b4:	86 23       	and	r24, r22
		}
		break;
 1b6:	08 95       	ret
		case PD:
		{
			Data =  PIND & value;
 1b8:	80 b3       	in	r24, 0x10	; 16
 1ba:	86 23       	and	r24, r22
		}
		break;
 1bc:	08 95       	ret
		break;
	}
}
uint8_t DIO_read(uint8_t Port_name, uint8_t value )
{
	uint8_t Data = 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
			Data =  PIND & value;
		}
		break;
	}
	return Data;
}
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
